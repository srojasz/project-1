{"version":3,"sources":["components/Card.js","components/CardList.js","components/Header.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","card","icon","isOpen","onClick","isBlocked","name","cardUp","unlockedCard","undefined","Fragment","className","CardList","spanishTexts","englishTexts","language","shuffleButton","textAlert","useState","dataCards","cards","setCards","i","j","temp","length","Math","floor","random","shuffleCards","map","key","css","index","e","openCards","push","alert","Header","handleToggleClass","activeClass","mainText","starterText","secondaryText","type","data-js-toggle-text","Footer","noTimeText","fastButton","cvUrl","href","target","title","App","setActiveClass","languageSelected","setLanguage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a36ec34.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../stylesheets/card.scss\";\r\n\r\nfunction Card(props) {\r\n  const { id, card, icon, isOpen, onClick, isBlocked } = props;\r\n\r\n  let name = isOpen ? props.name : \"\";\r\n  const cardUp = isOpen ? \"card-up\" : \"\";\r\n  const unlockedCard =\r\n    isBlocked !== undefined && isBlocked === false ? \"unlocked-card\" : \"\";\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        onClick={onClick}\r\n        id={id}\r\n        className={`game-board__card ${card} ${cardUp} ${unlockedCard}`}\r\n      >\r\n        <h3 className=\"game-board__card--title\">{name}</h3>\r\n        <i className={`game-board__card--icon ${icon}`}></i>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState } from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"../stylesheets/card.scss\";\r\nimport dataCards from \"../data/dataCards.json\";\r\n\r\nfunction CardList(props) {\r\n  const { spanishTexts, englishTexts, language } = props;\r\n\r\n  const shuffleButton =\r\n    language === \"spanish\"\r\n      ? spanishTexts.shuffleButton\r\n      : englishTexts.shuffleButton;\r\n\r\n  const textAlert =\r\n    language === \"spanish\"\r\n      ? \"Ooops, todavía no puedes abrir esta carta. ¡Sigue jugando!\"\r\n      : \"Ooops, you can't open this card yet. Keep playing!\";\r\n\r\n  //Set state.\r\n  const [cards, setCards] = useState(dataCards);\r\n\r\n  //Handle functions.\r\n  const handleSuffle = () => {\r\n    let i, j, temp;\r\n    for (i = cards.length - 1; i > 0; i--) {\r\n      j = Math.floor(Math.random() * (i + 1));\r\n      temp = cards[i];\r\n      cards[i] = cards[j];\r\n      cards[j] = temp;\r\n    }\r\n    const shuffleCards = [...cards];\r\n    setCards(shuffleCards);\r\n  };\r\n\r\n  const onClick = (index) => (e) => {\r\n    const card = cards[index];\r\n    const openCards = [];\r\n\r\n    // If it is a card with no restrictions.\r\n    if (!card.isBlocked) {\r\n      cards[index] = {\r\n        ...card,\r\n        isOpen: true,\r\n      };\r\n    } else {\r\n      // Keep the open cards ID in an array.\r\n      cards.map((card) => {\r\n        if (card.isOpen) {\r\n          openCards.push(card.id);\r\n        }\r\n      });\r\n\r\n      // If rest of cards are open, change isOpen and isBlocked properties at the state.\r\n      if (openCards.length === cards.length - 1) {\r\n        cards[index] = {\r\n          ...card,\r\n          isOpen: !card.isOpen,\r\n          isBlocked: false,\r\n        };\r\n      } else {\r\n        alert(textAlert);\r\n      }\r\n    }\r\n    setCards([...cards]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <button onClick={handleSuffle} className=\"header__button\">\r\n        {shuffleButton}\r\n      </button>\r\n      <div className=\"game-board\">\r\n        {cards.map((card, key) => {\r\n          return (\r\n            <Card\r\n              key={key}\r\n              id={card.id}\r\n              icon={card.icon}\r\n              card={card.css}\r\n              name={card.name}\r\n              isOpen={card.isOpen}\r\n              isBlocked={card.isBlocked}\r\n              onClick={onClick(key)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"../stylesheets/header.scss\";\r\n\r\nfunction Header(props) {\r\n  const {\r\n    handleToggleClass,\r\n    activeClass,\r\n    language,\r\n    spanishTexts,\r\n    englishTexts,\r\n  } = props;\r\n\r\n  const mainText =\r\n    language === \"spanish\"\r\n      ? spanishTexts.starterText\r\n      : englishTexts.starterText;\r\n\r\n  const secondaryText =\r\n    language === \"spanish\"\r\n      ? spanishTexts.secondaryText\r\n      : englishTexts.secondaryText;\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header__toggle--container\">\r\n        <label className=\"header__toggle\">\r\n          <input type=\"checkbox\" />\r\n          <span\r\n            className=\"header__toggle--btn\"\r\n            onClick={handleToggleClass}\r\n          ></span>\r\n        </label>\r\n        <span data-js-toggle-text className={activeClass}>\r\n          English, please!\r\n        </span>\r\n      </div>\r\n      <h2 className=\"header__title\">My game vitae!</h2>\r\n      <h3 className=\"header__subtitle\">\r\n        Why just apply when you can also play?\r\n      </h3>\r\n      <p className=\"header__text\">{mainText}</p>\r\n      <p className=\"header__text\">{secondaryText}</p>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"../stylesheets/footer.scss\";\r\n\r\nfunction Footer(props) {\r\n  const { spanishTexts, englishTexts, language } = props;\r\n\r\n  const noTimeText =\r\n    language === \"spanish\" ? spanishTexts.noTimeText : englishTexts.noTimeText;\r\n\r\n  const fastButton =\r\n    language === \"spanish\" ? spanishTexts.fastButton : englishTexts.fastButton;\r\n\r\n  const cvUrl =\r\n    language === \"spanish\"\r\n      ? \"https://drive.google.com/file/d/1E437fkUNZA5SwoeoCGXs12KNXBVxtsLE/view\"\r\n      : \"https://drive.google.com/file/d/1fJmwHEkny7Uy6AvP9NihjX3d9pJmSB71/view?usp=sharing\";\r\n  return (\r\n    <footer className=\"footer\">\r\n      <section className=\"footer__info\">\r\n        <p className=\"footer__info--text\">{noTimeText}</p>\r\n        <a\r\n          href={cvUrl}\r\n          target=\"_blank\"\r\n          title=\"Descarga el CV en PDF\"\r\n          className=\"footer__info--button\"\r\n        >\r\n          {fastButton}\r\n        </a>\r\n      </section>\r\n      <section className=\"footer__social\">\r\n        <p>Aquí van las redes sociales</p>\r\n      </section>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\r\nimport CardList from \"./CardList\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport \"../stylesheets/app.scss\";\r\n\r\nfunction App() {\r\n  const spanishTexts = {\r\n    starterText:\r\n      \"¡Hola! Me llamo Sara Rojas y soy una desarrolladora Front-end junior con muchas ganas de trabajar y seguir aprendiendo sobre JavaScript, React, HTML y CSS. Después de 12 años como periodista, muchos de ellos vinculada al mundo digital, llevo un año en el sector tecnológico como desarrolladora. ¡Muy feliz y orgullosa de todo lo aprendido en este tiempo! Si estás buscando un perfil como este, te propongo un juego para ver si hacemos match: solo tienes que barajar las cartas y pinchar sobre ellas.\",\r\n    secondaryText:\r\n      \"Solo cuando hayas volteado todas y me conozcas todo mejor, podrás desbloquear la carta de BONUS. ¿Juegas?\",\r\n    shuffleButton: \"A mezclar\",\r\n    noTimeText:\r\n      \"¡Me encanta tu idea, pero no tengo tiempo! ¿Me lo cuentas del tirón?\",\r\n    fastButton: \"Al grano, Sara\",\r\n  };\r\n\r\n  const englishTexts = {\r\n    starterText:\r\n      \"Hi! My name is Sara Rojas and I am a junior Front-end developer eager to work and continue learning about JavaScript, React, HTML and CSS. After 12 years as a journalist, many of them linked to the digital world, I have been in the technology sector for a year as a developer. So happy and proud of everything learned in this time! If you are looking for a profile like this, I suggest you a game to see if we can match : you just have to shuffle the cards and click on them.\",\r\n    secondaryText:\r\n      \"Only when you have turned them all over and you know me all better, you can unlock the BONUS card. You play?\",\r\n    shuffleButton: \"Shuffle now!\",\r\n    noTimeText:\r\n      \"I love your creativity, but I don't have time for this! Can you tell me all at once?\",\r\n    fastButton: \"Don't roll up, please!\",\r\n  };\r\n\r\n  // State.\r\n  const [activeClass, setActiveClass] = useState(\"\");\r\n  const [languageSelected, setLanguage] = useState(\"spanish\");\r\n\r\n  const handleToggleClass = () => {\r\n    const value = !!activeClass ? \"\" : \"active\";\r\n    const languageSelected = !!activeClass ? \"spanish\" : \"english\";\r\n    setActiveClass(value);\r\n    setLanguage(languageSelected);\r\n  };\r\n  return (\r\n    <div className=\"app-container\">\r\n      <Header\r\n        handleToggleClass={handleToggleClass}\r\n        activeClass={activeClass}\r\n        language={languageSelected}\r\n        spanishTexts={spanishTexts}\r\n        englishTexts={englishTexts}\r\n      />\r\n      <CardList\r\n        language={languageSelected}\r\n        spanishTexts={spanishTexts}\r\n        englishTexts={englishTexts}\r\n      />\r\n      <Footer\r\n        language={languageSelected}\r\n        spanishTexts={spanishTexts}\r\n        englishTexts={englishTexts}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}